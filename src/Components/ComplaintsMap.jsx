import React, { useState, useCallback, useMemo } from 'react';
import { GoogleMap, useJsApiLoader, Marker } from '@react-google-maps/api';

const containerStyle = {
  width: '100%',
  height: '500px'
};

const center = {
  lat: 41.3111, // –¶–µ–Ω—Ç—Ä –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω–∞
  lng: 74.1917
};

const libraries = ['visualization'];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –º–∞—Ä–∫–µ—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∂–∞–ª–æ–±
const getMarkerColor = (count) => {
  if (count >= 100) return 'üî¥'; // –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
  if (count >= 50) return 'üü†';  // –û—Ä–∞–Ω–∂–µ–≤—ã–π –¥–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
  return 'üü°';                   // –ñ–µ–ª—Ç—ã–π –¥–ª—è –º–∞–ª–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
};

const ComplaintsMap = ({ complaints }) => {
  const { isLoaded } = useJsApiLoader({
    id: 'google-map-script',
    googleMapsApiKey: "",
    libraries: libraries
  });

  const [map, setMap] = useState(null);
  const [selectedMarker, setSelectedMarker] = useState(null);

  const onLoad = useCallback(function callback(map) {
    setMap(map);
  }, []);

  const onUnmount = useCallback(function callback() {
    setMap(null);
  }, []);

  const onMarkerClick = useCallback((complaint) => {
    setSelectedMarker(complaint);
  }, []);

  if (!isLoaded) {
    return <div className="map-loading">–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç—ã...</div>;
  }

  return (
    <div className="map-container">
      <GoogleMap
        mapContainerStyle={containerStyle}
        center={center}
        zoom={7}
        onLoad={onLoad}
        onUnmount={onUnmount}
        options={{
          mapTypeId: 'roadmap',
          styles: [
            {
              featureType: 'all',
              elementType: 'labels.text.fill',
              stylers: [{ color: '#7c93a3' }]
            },
            {
              featureType: 'all',
              elementType: 'labels.text.stroke',
              stylers: [{ visibility: 'on' }, { color: '#ffffff' }, { weight: 2 }]
            }
          ]
        }}
      >
        {complaints?.map((complaint, index) => (
          <Marker
            key={index}
            position={{ lat: complaint.latitude, lng: complaint.longitude }}
            onClick={() => onMarkerClick(complaint)}
            label={{
              text: getMarkerColor(complaint.count),
              fontSize: '20px',
              fontWeight: 'bold'
            }}
          />
        ))}
      </GoogleMap>
      
      {selectedMarker && (
        <div className="marker-info">
          <h3>{selectedMarker.title}</h3>
          <p>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∞–ª–æ–±: {selectedMarker.count}</p>
        </div>
      )}
    </div>
  );
};

export default ComplaintsMap; 