import logging
from datetime import datetime
from typing import Dict, Any

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext

from states import ReportStates
from keyboards import (
    get_main_menu_keyboard, get_report_types_keyboard, get_regions_keyboard,
    get_cities_keyboard, get_confirmation_keyboard
)
from utils import (
    format_report, get_address_from_coordinates, save_report_to_file,
    validate_report_data, escape_markdown, get_city_coordinates
)
from config import ADMIN_USER_ID, API_ENABLED
from api_client import send_report_to_api

router = Router()


@router.message(CommandStart())
async def start_command(message: Message, state: FSMContext):
    """Handle /start command"""
    await state.clear()
    
    welcome_text = f"""
üèõÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –æ–±—Ä–∞—â–µ–Ω–∏–π –ø–æ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–º —É—Å–ª—É–≥–∞–º –ö—ã—Ä–≥—ã–∑—Å–∫–æ–π –†–µ—Å–ø—É–±–ª–∏–∫–∏.

–î–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –ø–æ–¥–∞—á–∏ –∂–∞–ª–æ–± –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –∫–∞—á–µ—Å—Ç–≤—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö —É—Å–ª—É–≥.

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
    
    await message.answer(
        welcome_text,
        reply_markup=get_main_menu_keyboard()
    )


@router.message(Command("help"))
async def help_command(message: Message):
    """Handle /help command"""
    help_text = """
‚ÑπÔ∏è **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Å–∏—Å—Ç–µ–º—ã**

**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å —Å–∏—Å—Ç–µ–º–æ–π
‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
‚Ä¢ /cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ

**–ü–æ—Ä—è–¥–æ–∫ –ø–æ–¥–∞—á–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è:**
1. –ù–∞–∂–º–∏—Ç–µ "üìù –ü–æ–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ"
2. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏—è (–ñ–∞–ª–æ–±–∞/–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏)
3. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω
4. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç
5. –ò–∑–ª–æ–∂–∏—Ç–µ —Å—É—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏—è
6. –£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
7. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É

**–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞:** –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
"""
    
    await message.answer(help_text, parse_mode="Markdown")


@router.message(Command("cancel"))
async def cancel_command(message: Message, state: FSMContext):
    """Handle /cancel command"""
    await state.clear()
    await message.answer(
        "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=ReplyKeyboardRemove()
    )
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu_keyboard()
    )


@router.callback_query(F.data == "create_report")
async def start_report_creation(callback: CallbackQuery, state: FSMContext):
    """Start report creation process"""
    await callback.answer()
    
    # Initialize report data
    await state.update_data(
        user_id=callback.from_user.id,
        username=callback.from_user.username or "–ù–µ —É–∫–∞–∑–∞–Ω",
        created_at=datetime.now().strftime('%d.%m.%Y %H:%M')
    )
    
    await callback.message.edit_text(
        "üìù **–ü–æ–¥–∞—á–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏—è:",
        reply_markup=get_report_types_keyboard(),
        parse_mode="Markdown"
    )
    
    await state.set_state(ReportStates.waiting_for_report_type)


@router.callback_query(F.data.startswith("report_type:"))
async def process_report_type(callback: CallbackQuery, state: FSMContext):
    """Process report type selection"""
    await callback.answer()
    
    report_type = callback.data.split(":", 1)[1]
    await state.update_data(type=report_type)
    
    await callback.message.edit_text(
        f"‚úÖ –¢–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏—è: **{report_type}**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω:",
        reply_markup=get_regions_keyboard(),
        parse_mode="Markdown"
    )
    
    await state.set_state(ReportStates.waiting_for_region)


@router.callback_query(F.data.startswith("region:"))
async def process_region(callback: CallbackQuery, state: FSMContext):
    """Process region selection"""
    await callback.answer()
    
    region = callback.data.split(":", 1)[1]
    await state.update_data(region=region)
    
    await callback.message.edit_text(
        f"‚úÖ –†–µ–≥–∏–æ–Ω: **{region}**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç:",
        reply_markup=get_cities_keyboard(region),
        parse_mode="Markdown"
    )
    
    await state.set_state(ReportStates.waiting_for_city)


@router.callback_query(F.data == "back_to_regions")
async def back_to_regions(callback: CallbackQuery, state: FSMContext):
    """Go back to regions selection"""
    await callback.answer()
    
    data = await state.get_data()
    report_type = data.get('type', '–ù–µ –≤—ã–±—Ä–∞–Ω')
    
    await callback.message.edit_text(
        f"‚úÖ –¢–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏—è: **{report_type}**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω:",
        reply_markup=get_regions_keyboard(),
        parse_mode="Markdown"
    )
    
    await state.set_state(ReportStates.waiting_for_region)


@router.callback_query(F.data.startswith("city:"))
async def process_city(callback: CallbackQuery, state: FSMContext):
    """Process city selection"""
    await callback.answer()
    
    city = callback.data.split(":", 1)[1]
    
    # Get coordinates for the selected city
    city_location = get_city_coordinates(city)
    
    await state.update_data(
        city=city,
        location=city_location  # Automatically set location based on city
    )
    
    data = await state.get_data()
    
    location_info = ""
    if city_location:
        location_info = f"\nüìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {city_location['latitude']:.4f}, {city_location['longitude']:.4f}"
    
    await callback.message.edit_text(
        f"‚úÖ –¢–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏—è: **{data.get('type')}**\n"
        f"‚úÖ –†–µ–≥–∏–æ–Ω: **{data.get('region')}**\n"
        f"‚úÖ –ù–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç: **{city}**{location_info}\n\n"
        f"–ò–∑–ª–æ–∂–∏—Ç–µ —Å—É—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏—è:",
        parse_mode="Markdown"
    )
    
    await state.set_state(ReportStates.waiting_for_report_text)


@router.message(ReportStates.waiting_for_report_text)
async def process_report_text(message: Message, state: FSMContext):
    """Process report text input"""
    if len(message.text) < 10:
        await message.answer(
            "‚ùå –¢–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ - 10 —Å–∏–º–≤–æ–ª–æ–≤."
        )
        return
    
    await state.update_data(report_text=message.text)
    
    await message.answer(
        "‚úÖ –¢–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è –ø—Ä–∏–Ω—è—Ç.\n\n"
        "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–§–ò–û):"
    )
    
    await state.set_state(ReportStates.waiting_for_user_name)


@router.message(ReportStates.waiting_for_user_name)
async def process_user_name(message: Message, state: FSMContext):
    """Process user name input"""
    if len(message.text) < 2:
        await message.answer(
            "‚ùå –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ - 2 —Å–∏–º–≤–æ–ª–∞."
        )
        return
    
    await state.update_data(user_name=message.text)
    
    await message.answer(
        "‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.\n\n"
    )
    
    await show_report_confirmation(message, state)





async def show_report_confirmation(message: Message, state: FSMContext):
    """Show report confirmation"""
    data = await state.get_data()
    
    # Validate data
    is_valid, validation_message = validate_report_data(data)
    
    if not is_valid:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {validation_message}")
        return
    
    # Format report for preview
    report_preview = await format_report(data)
    
    await message.answer(
        f"üìã **–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –æ–±—Ä–∞—â–µ–Ω–∏—è:**\n\n{report_preview}\n\n"
        f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É:",
        reply_markup=get_confirmation_keyboard(),
        parse_mode="Markdown"
    )
    
    await state.set_state(ReportStates.confirming_report)


@router.callback_query(F.data == "confirm_report")
async def confirm_report(callback: CallbackQuery, state: FSMContext):
    """Confirm and send report"""
    await callback.answer()
    
    data = await state.get_data()
    
    # Show processing message
    await callback.message.edit_text(
        "‚è≥ **–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è...**\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.",
        parse_mode="Markdown"
    )
    
    # Initialize variables
    api_response = None
    registration_number = None
    
    # Try to send to API first
    if API_ENABLED:
        try:
            api_response = await send_report_to_api(data)
            if api_response.get('success'):
                registration_number = api_response.get('data', {}).get('id', 'API_SUCCESS')
                logging.info(f"Report sent to API successfully: {registration_number}")
            else:
                logging.error(f"API submission failed: {api_response.get('message')}")
        except Exception as e:
            logging.error(f"Error sending to API: {e}")
    
    # Save report to file as backup
    filename = await save_report_to_file(data)
    
    # Use API registration number if available, otherwise use filename
    if not registration_number:
        registration_number = filename.split('/')[-1] if filename else 'LOCAL_BACKUP'
    
    # Format final report
    final_report = await format_report(data)
    
    # Send to admin if configured
    if ADMIN_USER_ID:
        try:
            admin_message = f"üÜï **–ù–û–í–û–ï –û–ë–†–ê–©–ï–ù–ò–ï**\n\n{final_report}"
            if api_response:
                if api_response.get('success'):
                    admin_message += f"\n\n‚úÖ **–°—Ç–∞—Ç—É—Å API:** –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
                else:
                    admin_message += f"\n\n‚ùå **–°—Ç–∞—Ç—É—Å API:** {api_response.get('message', '–û—à–∏–±–∫–∞')}"
            
            await callback.bot.send_message(
                ADMIN_USER_ID,
                admin_message,
                parse_mode="Markdown"
            )
        except Exception as e:
            logging.error(f"Failed to send report to admin: {e}")
    
    # Prepare success message
    if api_response and api_response.get('success'):
        success_message = (
            "‚úÖ **–û–±—Ä–∞—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ –∫ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—é**\n\n"
            "–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –≤ —Å–∏—Å—Ç–µ–º–µ –∏ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–æ "
            "–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ–º —Å—Ä–æ–∫–∏.\n\n"
            f"üìÅ **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä:** `{registration_number}`\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è."
        )
    else:
        success_message = (
            "‚úÖ **–û–±—Ä–∞—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ**\n\n"
            "–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ. "
            "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –µ–≥–æ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n"
            f"üìÅ **–ù–æ–º–µ—Ä:** `{registration_number}`"
        )
    
    await callback.message.edit_text(
        success_message,
        parse_mode="Markdown"
    )
    
    # Show main menu again
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu_keyboard()
    )
    
    await state.clear()


@router.callback_query(F.data == "cancel_report")
async def cancel_report(callback: CallbackQuery, state: FSMContext):
    """Cancel report creation"""
    await callback.answer()
    
    await callback.message.edit_text(
        "‚ùå –ü–æ–¥–∞—á–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞."
    )
    
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu_keyboard()
    )
    
    await state.clear()


@router.callback_query(F.data == "edit_report")
async def edit_report(callback: CallbackQuery, state: FSMContext):
    """Edit report - restart the process"""
    await callback.answer()
    
    await callback.message.edit_text(
        "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è. –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏—è:",
        reply_markup=get_report_types_keyboard()
    )
    
    # Keep user data but restart the process
    data = await state.get_data()
    await state.clear()
    await state.update_data(
        user_id=data.get('user_id'),
        username=data.get('username'),
        created_at=datetime.now().strftime('%d.%m.%Y %H:%M')
    )
    
    await state.set_state(ReportStates.waiting_for_report_type)


@router.callback_query(F.data == "info")
async def show_info(callback: CallbackQuery):
    """Show bot information"""
    await callback.answer()
    
    info_text = """
‚ÑπÔ∏è **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ**

–°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –ø—Ä–∏–µ–º–∞ –æ–±—Ä–∞—â–µ–Ω–∏–π –≥—Ä–∞–∂–¥–∞–Ω –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –∫–∞—á–µ—Å—Ç–≤–∞ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö —É—Å–ª—É–≥ –≤ –ö—ã—Ä–≥—ã–∑—Å–∫–æ–π –†–µ—Å–ø—É–±–ª–∏–∫–µ.

**–¢–∏–ø—ã –æ–±—Ä–∞—â–µ–Ω–∏–π:**
‚Ä¢ üìù –ñ–∞–ª–æ–±–∞ - —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö –ø—Ä–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥
‚Ä¢ üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ - –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –∫–∞—á–µ—Å—Ç–≤–∞ —É—Å–ª—É–≥

**–¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∞–ª—å–Ω—ã–π –æ—Ö–≤–∞—Ç:**
‚Ä¢ –≥. –ë–∏—à–∫–µ–∫
‚Ä¢ –≥. –û—à
‚Ä¢ –ß—É–π—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å
‚Ä¢ –û—à—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å
‚Ä¢ –î–∂–∞–ª–∞–ª-–ê–±–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å
‚Ä¢ –ë–∞—Ç–∫–µ–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å
‚Ä¢ –ù–∞—Ä—ã–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å
‚Ä¢ –ò—Å—Å—ã–∫-–ö—É–ª—å—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å
‚Ä¢ –¢–∞–ª–∞—Å—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å

–í—Å–µ –æ–±—Ä–∞—â–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è –∏ –Ω–∞–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ä–≥–∞–Ω—ã –¥–ª—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è.
"""
    
    await callback.message.edit_text(
        info_text,
        reply_markup=get_main_menu_keyboard(),
        parse_mode="Markdown"
    )


# Handle any other messages during states
@router.message()
async def handle_unexpected_message(message: Message, state: FSMContext):
    """Handle unexpected messages"""
    current_state = await state.get_state()
    
    if current_state:
        await message.answer(
            "‚ùå –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )
    else:
        await message.answer(
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–æ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start",
            reply_markup=get_main_menu_keyboard()
        ) 