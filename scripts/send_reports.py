import requests
import random
import time
from datetime import datetime, timedelta
import json

# Базовый URL API
API_BASE_URL = "https://publicpulse-back-739844766362.asia-southeast2.run.app"

# Список регионов и городов
REGIONS = [
    "Бишкек",
    "Ош",
    "Чуйская область",
    "Иссык-Кульская область",
    "Нарынская область",
    "Таласская область",
    "Джалал-Абадская область",
    "Ошская область",
    "Баткенская область",
]

CITIES = {
    "Бишкек": [
        "Аламединский район",
        "Ленинский район",
        "Октябрьский район",
        "Первомайский район",
        "Свердловский район",
        "Ала-Арча",
        "Аламедин",
        "Арча-Бешик",
        "Бакай-Ата",
        "Байтик",
        "Бирдик",
        "Восток-5",
        "Джал",
        "Дордой",
        "Кок-Жар",
        "Кок-Джар",
        "Кызыл-Аскер",
        "Манас",
        "Орто-Сай",
        "Сокулук",
        "Токольдош",
        "Чон-Арык",
        "Чуй",
        "Эне-Сай",
    ],
    "Ош": [
        "Алмалык",
        "Араван",
        "Араванский район",
        "Кара-Суу",
        "Кара-Сууский район",
        "Кара-Кульджа",
        "Кара-Кульджинский район",
        "Ноокат",
        "Ноокатский район",
        "Узген",
        "Узгенский район",
        "Чон-Алай",
        "Чон-Алайский район",
    ],
    "Чуйская область": [
        "Токмок",
        "Кара-Балта",
        "Кант",
        "Аламудунский район",
        "Жайылский район",
        "Кеминский район",
        "Московский район",
        "Панфиловский район",
        "Сокулукский район",
        "Чуйский район",
    ],
    "Иссык-Кульская область": [
        "Каракол",
        "Балыкчы",
        "Чолпон-Ата",
        "Ак-Суйский район",
        "Джети-Огузский район",
        "Иссык-Кульский район",
        "Тонский район",
        "Тюпский район",
    ],
    "Нарынская область": [
        "Нарын",
        "Ак-Талинский район",
        "Ат-Башинский район",
        "Жумгальский район",
        "Кочкорский район",
        "Нарынский район",
    ],
    "Таласская область": [
        "Талас",
        "Бакай-Атинский район",
        "Кара-Бууринский район",
        "Манасский район",
        "Таласский район",
    ],
    "Джалал-Абадская область": [
        "Джалал-Абад",
        "Таш-Кумыр",
        "Майлуу-Суу",
        "Кара-Куль",
        "Аксыйский район",
        "Ала-Букинский район",
        "Базар-Коргонский район",
        "Ноокенский район",
        "Сузакский район",
        "Тогуз-Тороуский район",
        "Токтогульский район",
        "Чаткальский район",
    ],
    "Ошская область": [
        "Ноокат",
        "Узген",
        "Алайский район",
        "Араванский район",
        "Кара-Кульджинский район",
        "Кара-Сууский район",
        "Ноокатский район",
        "Узгенский район",
        "Чон-Алайский район",
    ],
    "Баткенская область": [
        "Баткен",
        "Кызыл-Кыя",
        "Сулюкта",
        "Баткенский район",
        "Кадамжайский район",
        "Лейлекский район",
    ],
}

# Добавляем микрорайоны для крупных городов
MICRODISTRICTS = {
    "Бишкек": [
        "Аламедин",
        "Ала-Арча",
        "Арча-Бешик",
        "Бакай-Ата",
        "Байтик",
        "Бирдик",
        "Восток-5",
        "Джал",
        "Дордой",
        "Кок-Жар",
        "Кок-Джар",
        "Кызыл-Аскер",
        "Манас",
        "Орто-Сай",
        "Сокулук",
        "Токольдош",
        "Чон-Арык",
        "Чуй",
        "Эне-Сай",
    ],
    "Ош": [
        "Алмалык",
        "Араван",
        "Кара-Суу",
        "Кара-Кульджа",
        "Ноокат",
        "Узген",
        "Чон-Алай",
    ],
    "Каракол": [
        "Ак-Терек",
        "Боз-Учук",
        "Джети-Огуз",
        "Каракол",
        "Оргочор",
        "Тепке",
        "Тосор",
    ],
    "Нарын": ["Ак-Талаа", "Ат-Баши", "Джумгал", "Кочкор", "Нарын", "Эмгекчил"],
    "Талас": ["Бакай-Ата", "Кара-Буура", "Манас", "Талас"],
    "Джалал-Абад": [
        "Аксый",
        "Ала-Бука",
        "Базар-Коргон",
        "Ноокен",
        "Сузак",
        "Тогуз-Тороо",
        "Токтогул",
        "Чаткал",
    ],
}

# Структура жалоб с соответствующими типами и текстами
COMPLAINTS = {
    "Жалоба на качество дорог": [
        "Очень плохое состояние дороги, много ям и выбоин",
        "После дождя дорога превращается в болото",
        "Разбитый асфальт на пешеходном переходе",
        "Опасные ямы на дороге, нужен срочный ремонт",
        "Дорога требует капитального ремонта",
    ],
    "Жалоба на освещение": [
        "Не работает уличное освещение уже несколько дней",
        "Темно на детской площадке вечером",
        "Перегоревшие фонари на всей улице",
        "Недостаточное освещение на остановке",
        "Мигающие фонари создают опасность",
    ],
    "Жалоба на уборку мусора": [
        "Мусор не вывозится регулярно, контейнеры переполнены",
        "Стихийная свалка возле дома",
        "Не убирается территория вокруг мусорных баков",
        "Мусор разносится ветром по всему двору",
        "Контейнеры для мусора требуют замены",
    ],
    "Жалоба на водоснабжение": [
        "Проблемы с водоснабжением, слабый напор воды",
        "Грязная вода течет из крана",
        "Постоянные перебои с горячей водой",
        "Протечка воды в подъезде",
        "Запах хлора в воде слишком сильный",
    ],
    "Жалоба на электроснабжение": [
        "Частые отключения электроэнергии",
        "Скачки напряжения в сети",
        "Неисправные электрические щитки",
        "Опасные провода на улице",
        "Проблемы с уличным освещением",
    ],
    "Жалоба на отопление": [
        "В квартире холодно, отопление работает плохо",
        "Батареи не прогреваются должным образом",
        "Неравномерное отопление в доме",
        "Протечки в системе отопления",
        "Слишком жарко в квартире, не регулируется",
    ],
    "Жалоба на общественный транспорт": [
        "Автобусы ходят нерегулярно, большие интервалы",
        "Грязные и неудобные автобусы",
        "Водители не соблюдают расписание",
        "Недостаточно транспорта в час пик",
        "Проблемы с оплатой проезда",
    ],
    "Жалоба на благоустройство": [
        "Детская площадка требует ремонта",
        "Отсутствуют скамейки во дворе",
        "Разбитые дорожки в парке",
        "Недостаточно зеленых насаждений",
        "Проблемы с поливом газонов",
    ],
    "Жалоба на работу ЖЭК": [
        "ЖЭК не реагирует на обращения",
        "Долгий ремонт в подъезде",
        "Не убирается придомовая территория",
        "Проблемы с уборкой снега зимой",
        "Не решаются проблемы с коммунальными услугами",
    ],
    "Жалоба на работу коммунальных служб": [
        "Коммунальные службы не выполняют свои обязанности",
        "Долгое ожидание ремонта",
        "Низкое качество выполненных работ",
        "Не соблюдаются сроки выполнения работ",
        "Отсутствует обратная связь от служб",
    ],
    "Жалоба на состояние тротуаров": [
        "Тротуар в аварийном состоянии, опасно ходить",
        "Разбитая плитка на тротуаре",
        "Отсутствует пандус для колясок",
        "Тротуар зарос травой и кустами",
        "Тротуар залит водой после дождя",
    ],
    "Жалоба на парковку": [
        "Проблемы с парковкой во дворе",
        "Недостаточное количество парковочных мест",
        "Стихийная парковка на газонах",
        "Парковка блокирует проезд",
        "Отсутствует разметка парковочных мест",
    ],
    "Жалоба на шум": [
        "Шумные работы в неположенное время",
        "Громкая музыка ночью",
        "Шум от строительных работ",
        "Шум от кондиционеров",
        "Шум от вентиляции",
    ],
    "Жалоба на состояние ливневок": [
        "Забитые ливневки после дождя",
        "Отсутствие ливневой канализации",
        "Разрушенные ливневки",
        "Затопление территории после дождя",
        "Нечищенные ливневки",
    ],
    "Жалоба на состояние зеленых насаждений": [
        "Недостаточно зеленых насаждений",
        "Сухие и опасные деревья",
        "Нестриженые кусты и газоны",
        "Отсутствие полива зеленых насаждений",
        "Поврежденные деревья после шторма",
    ],
}


def get_geocode(region, city, address):
    """Получение координат по адресу"""
    params = {"address": address, "city": city, "region": region}
    response = requests.get(f"{API_BASE_URL}/api/geocode/", params=params)
    if response.status_code == 200:
        return response.json()
    return {
        "latitude": 42.8746,
        "longitude": 74.5698,
    }  # Координаты Бишкека по умолчанию


def get_random_address(region, city):
    """Генерация случайного адреса с учетом микрорайона"""
    if city in MICRODISTRICTS:
        microdistrict = random.choice(MICRODISTRICTS[city])
        return f"мкр. {microdistrict}, ул. {random.randint(1, 100)}, д. {random.randint(1, 100)}"
    return f"ул. {random.randint(1, 100)}, д. {random.randint(1, 100)}"


def get_random_datetime():
    """Генерация случайной даты и времени в пределах последних 6 месяцев"""
    # Получаем текущее время
    now = datetime.now()
    # Вычисляем время 6 месяцев назад
    six_months_ago = now - timedelta(days=10)

    # Генерируем случайное количество секунд между six_months_ago и now
    random_seconds = random.randint(0, int((now - six_months_ago).total_seconds()))

    # Создаем случайную дату
    random_datetime = six_months_ago + timedelta(seconds=random_seconds)

    # Форматируем дату в нужный формат
    return random_datetime.strftime("%d.%m.%Y %H:%M")


def send_report():
    """Отправка одного отчета"""
    # Выбираем случайный регион и город
    region = random.choice(REGIONS)
    city = random.choice(CITIES[region])
    address = get_random_address(region, city)

    # Получаем координаты
    geocode_data = get_geocode(region, city, address)

    # Выбираем случайный тип жалобы и соответствующий текст
    complaint_type = random.choice(list(COMPLAINTS.keys()))
    complaint_text = random.choice(COMPLAINTS[complaint_type])

    # Формируем данные отчета
    report_data = {
        "report_text": complaint_text,
        "report_type": complaint_type,
        "region": region,
        "city": city,
        "address": address,
        "contact_info": f"Иван Иванов, +996{random.randint(500000000, 999999999)}",
        "status": "pending",
        "importance": random.choice(["low", "medium", "high"]),
        "service": "default",
        "agency": "default",
        "submission_source": "script",
        "language": "ru",
        "latitude": geocode_data["latitude"],
        "longitude": geocode_data["longitude"],
        "created_at": get_random_datetime(),
    }

    # Отправляем отчет
    response = requests.post(
        f"{API_BASE_URL}/api/reports/",
        json=report_data,
        headers={"Content-Type": "application/json"},
    )
    print(response.json())

    return response.status_code == 201


def main():
    """Основная функция для отправки множества отчетов"""
    num_reports = 20  # Количество отчетов для отправки
    success_count = 0

    print(f"Начинаем отправку {num_reports} отчетов...")

    for i in range(num_reports):
        if send_report():
            success_count += 1
            print(f"Отчет {i+1}/{num_reports} успешно отправлен")
        else:
            print(f"Ошибка при отправке отчета {i+1}/{num_reports}")

        # Пауза между запросами
        time.sleep(1)

    print(f"\nОтправка завершена!")
    print(f"Успешно отправлено: {success_count}")
    print(f"Ошибок: {num_reports - success_count}")


if __name__ == "__main__":
    main()
